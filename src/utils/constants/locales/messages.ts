export const messages = {
  errorServer: 'Internal server error.',
  tokenNotFound: 'Token not found or expired.',
  unauthorized: 'Invalid token.',
  invalidCredential: 'Username or password not match.',
  successRegister: 'Your registration request is created successfully.',
  successLogin: 'Login successfully.',
  successRefresh: 'Success refresh the token.',
  successLogout: 'Logout successfully.',
  forbidden: 'You do not have permission. Please contact admin.',
  uniqueConstraint: (data: string) => `${data} is already exists.`,
  errorConstraint: (data: string) => `Selected ${data.charAt(0).toUpperCase() + data.slice(1)} not found.`,
  errorNotFound: (data: string) => `${data.charAt(0).toUpperCase() + data.slice(1)} not found.`,
  successList: (data: string) => `Success get list ${data}.`,
  successDetail: (data: string) => `Success get detail ${data}.`,
  successCreate: (data: string) => `${data.charAt(0).toUpperCase() + data.slice(1)} created successfully.`,
  successUpdate: (data: string) => `${data.charAt(0).toUpperCase() + data.slice(1)} updated successfully.`,
  successPatch: (data: string, field: string) => `${data.charAt(0).toUpperCase() + data.slice(1)}'s ${field} updated successfully.`,
  successDelete: (data: string) => `${data.charAt(0).toUpperCase() + data.slice(1)} deleted successfully.`,
  successUpload: (data: string) => `${data} uploaded successfully.`,
}

export const messageEn = {
  errorConstraint: (params: { data: string }) => `Selected ${params.data} not found.`,
  errorNotFound: (params: { data: string }) => `${params.data} not found.`,
  errorServer: 'Internal server error.',
  forbidden: 'You do not have permission. Please contact admin.',
  invalidCredential: 'Username or password not match.',
  successCreate: (params: { data: string }) => `${params.data} created successfully.`,
  successDelete: (params: { data: string }) => `${params.data} deleted successfully.`,
  successDetail: (params: { data: string }) => `Success get detail ${params.data}.`,
  successList: (params: { data: string }) => `Success get list ${params.data}.`,
  successLogin: 'Login successfully.',
  successLogout: 'Logout successfully.',
  successPatch: (params: { data: string, field: string }) => `${params.data}'s ${params.field} updated successfully.`,
  successRefresh: 'Success refresh the token.',
  successUpdate: (params: { data: string }) => `${params.data} updated successfully.`,
  successUpload: (params: { data: string }) => `${params.data} uploaded successfully.`,
  tokenNotFound: 'Token not found or expired.',
  unauthorized: 'Invalid token.',
  uniqueConstraint: (params: { data: string }) => `${params.data} is already exists.`,
}

export const messageId: typeof messageEn = {
  errorConstraint: (params: { data: string }) => `${params.data} yang dipilih tidak ditemukan.`,
  errorNotFound: (params: { data: string }) => `${params.data} tidak ditemukan.`,
  errorServer: 'Terjadi kesalahan server.',
  forbidden: 'Anda tidak memiliki akses. Mohon hubungi admin.',
  invalidCredential: 'Nama pengguna atau kata sandi salah.',
  successCreate: (params: { data: string }) => `Berhasil membuat ${params.data} baru.`,
  successDelete: (params: { data: string }) => `Berhasil menghapus ${params.data}.`,
  successDetail: (params: { data: string }) => `Berhasil menampilkan detail ${params.data}.`,
  successList: (params: { data: string }) => `Berhasil menampilkan daftar ${params.data}.`,
  successLogin: 'Berhasil masuk.',
  successLogout: 'Berhasil keluar.',
  successPatch: (params: { data: string, field: string }) => `Berhasil memperbarui ${params.field} pada ${params.data}.`,
  successRefresh: 'Berhasil memperbarui token.',
  successUpdate: (params: { data: string }) => `Berhasil memperbarui ${params.data}.`,
  successUpload: (params: { data: string }) => `Berhasil mengunggah ${params.data}.`,
  tokenNotFound: 'Token tidak ditemukan atau telah kadaluarsa.',
  unauthorized: 'Token tidak valid.',
  uniqueConstraint: (params: { data: string }) => `${params.data} sudah tersedia.`,
}

