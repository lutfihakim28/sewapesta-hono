import { ItemTypeEnum } from '@/utils/enums/ItemTypeEnum'

export const messageEn = {
  changePassword: 'The password for this user can only be changed by the Super Admin or the user themselves.',
  deletedAccount: 'Your account has been deleted by admin.',
  errorServer: 'Internal server error.',
  expiredRefreshToken: 'Your refresh token is expired. Please login again.',
  forbidden: 'You do not have permission. Please contact admin.',
  incorrectPassword: 'Your old password is incorrect.',
  invalidCredential: 'Username or password not match.',
  roleAssignment: 'Super Admin role can not be assigned.',
  roleRemoval: 'Super Admin role can not be removed.',
  selfAssign: 'Only Super Admin or other Admin that can change your role.',
  success: 'Success',
  successChangePassword: 'Change password successfully.',
  successLogin: 'Login successfully.',
  successLogout: 'Logout successfully.',
  successRefresh: 'Success refresh the token.',
  tokenNotFound: 'Token not found or expired.',
  unauthorized: 'Invalid token.',
  available: (params: { data: string }) => `${params.data} is available.`,
  errorConstraint: (params: { data: string }) => `Selected ${params.data} not found.`,
  errorNotFound: (params: { data: string }) => `${params.data} not found.`,
  itemTypeUnmatch: (params: { id: number, type: ItemTypeEnum }) => `Selected item with ID ${params.id} is not ${params.type} type.`,
  successCreate: (params: { data: string }) => `${params.data} created successfully.`,
  successDelete: (params: { data: string }) => `${params.data} deleted successfully.`,
  successDetail: (params: { data: string }) => `Success get detail ${params.data}.`,
  successList: (params: { data: string }) => `Success get list ${params.data}.`,
  successPatch: (params: { data: string, field: string }) => `${params.data}'s ${params.field} updated successfully.`,
  successUpdate: (params: { data: string }) => `${params.data} updated successfully.`,
  successUpload: (params: { data: string }) => `${params.data} uploaded successfully.`,
  uniqueConstraint: (params: { data: string }) => `${params.data} is already exists.`,
}

export const messageId: typeof messageEn = {
  changePassword: 'Password akun pengguna hanya dapat diganti oleh Super Admin atau pemilik akun.',
  deletedAccount: 'Akun anda telah dihapus oleh admin.',
  errorServer: 'Terjadi kesalahan server.',
  expiredRefreshToken: 'Token anda telah kadaluarsa. Mohon login kembali.',
  forbidden: 'Anda tidak memiliki akses. Mohon hubungi admin.',
  incorrectPassword: 'Kata sandi lama anda salah.',
  invalidCredential: 'Nama pengguna atau kata sandi salah.',
  roleAssignment: 'Peran Super Admin tidak dapat ditetapkan.',
  roleRemoval: 'Peran Super Admin tidak dapat dihapus.',
  selfAssign: 'Hanya Super Admin atau Admin lain yang dapat mengubah peran akun anda.',
  success: 'Berhasil',
  successChangePassword: 'Berhasil mengubah kata sandi.',
  successLogin: 'Berhasil masuk.',
  successLogout: 'Berhasil keluar.',
  successRefresh: 'Berhasil memperbarui token.',
  tokenNotFound: 'Token tidak ditemukan atau telah kadaluarsa.',
  unauthorized: 'Token tidak valid.',
  available: (params: { data: string }) => `${params.data} tersedia.`,
  errorConstraint: (params: { data: string }) => `${params.data} yang dipilih tidak ditemukan.`,
  errorNotFound: (params: { data: string }) => `${params.data} tidak ditemukan.`,
  itemTypeUnmatch: (params: { id: number, type: ItemTypeEnum }) => `Barang yang dipilih dengan ID ${params.id} bukan merupakan jenis barang ${params.type}.`,
  successCreate: (params: { data: string }) => `Berhasil membuat ${params.data}.`,
  successDelete: (params: { data: string }) => `Berhasil menghapus ${params.data}.`,
  successDetail: (params: { data: string }) => `Berhasil menampilkan detail ${params.data}.`,
  successList: (params: { data: string }) => `Berhasil menampilkan daftar ${params.data}.`,
  successPatch: (params: { data: string, field: string }) => `Berhasil memperbarui ${params.field} pada ${params.data}.`,
  successUpdate: (params: { data: string }) => `Berhasil memperbarui ${params.data}.`,
  successUpload: (params: { data: string }) => `Berhasil mengunggah ${params.data}.`,
  uniqueConstraint: (params: { data: string }) => `${params.data} sudah tersedia.`,
}

